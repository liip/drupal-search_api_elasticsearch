<?php

/**
 * @file
 * Provides a elasticsearch-based service class for the Search API.
 */

/**
 * Implements hook_search_api_service_info().
 */
function search_api_elasticsearch_search_api_service_info() {
  $services['search_api_elasticsearch_service'] = array(
    'name' => t('Elasticsearch service'),
    'description' => t('
    <p>Index items using a !url_elasticsearch search server.</p>
    <ul>
    <li>All field types are supported.</li>
    <li>Search API facets are supported.</li>
    <li>Will use internal elasticsearch preprocessors, so Search API preprocessors should for the most part be deactivated.</li>
    <li>See the README.txt file provided with this module for details.</li>
    </ul>',
    array(
      '!url_elasticsearch' => l(t('Elasticsearch'), 'http://www.elasticsearch.org/'),
    )),
    'class' => 'SearchApiElasticsearchService',
  );
  return $services;
}

/**
 * Implements hook_init().
 *
 * Register the autoload function for the Elastica classes.
 */
function search_api_elasticsearch_init() {
  spl_autoload_register('_search_api_elasticsearch_autoload');
}

/**
 * Return path to Elastica library path, or FALSE if not found.
 */
function _search_api_elasticsearch_elastica_path($reset = FALSE) {
  static $path = NULL;

  if ($reset === TRUE) {
    $path = NULL;
  }

  if (!isset($path)) {
    $path = FALSE;
    // If Libraries API is installed, we first use that to try and find the
    // library. Otherwise we manually check a few locations.
    $search_dirs = array();
    if (function_exists('libraries_get_path')) {
      $dir = libraries_get_path('Elastica');
      // Confusingly, Libraries API 1.x will return sites/all/libraries/NAME on
      // failure, while Libraries API 2.x returns FALSE in that case.
      if (!empty($dir)) {
        $search_dirs[] = $dir;
      }
    }
    else {
      $search_dirs[] = 'sites/all/libraries/Elastica';
    }
    $search_dirs[] = drupal_get_path('module', 'search_api_elasticsearch') . '/Elastica';
    foreach ($search_dirs as $dir) {
      $dir = DRUPAL_ROOT . '/' . $dir . '/lib';
      if (is_dir($dir)) {
        $path = $dir;
        break;
      }
    }
  }

  return $path;
}

/**
 * Autoloader for the Elastica classes.
 */
function _search_api_elasticsearch_autoload($name) {
  static $lookup_cache = array();

  if (isset($lookup_cache[$name])) {
    return $lookup_cache[$name];
  }
  elseif (drupal_substr($name, 0, 8) == 'Elastica') {
    $path = _search_api_elasticsearch_elastica_path();
    if (file_exists($file_path = $path . '/' . str_replace('\\', '/', $name) . '.php')) {
      require_once $file_path;
      $lookup_cache[$name] = TRUE;
      return TRUE;
    }
  }
  $lookup_cache[$name] = FALSE;
  return FALSE;
}

/**
 * Ajax callback for adding more nodes.
 *
 * @param array $form
 * @param array $form_state
 */
function _search_api_elasticsearch_configuration_form_ajax($form, &$form_state) {
  unset($form['options']['form']['add_more']);
  if (module_exists('search_api_facetapi')) {
    unset($form['options']['form']['facet_settings']);
  }

  return $form['options']['form'];
}

/**
 * Ajax callback for remove nodes.
 * @param array $form
 * @param array $form_state
 */
function _search_api_elasticsearch_configuration_form_remove_ajax($form, &$form_state) {
  unset($form['options']['form']['add_more']);
  if (module_exists('search_api_facetapi')) {
    unset($form['options']['form']['facet_settings']);
  }

  return $form['options']['form'];
}

/**
 * Submit Handler for the configuration form.
 *
 * @param array $form
 * @param array $form_state
 */
function _search_api_elasticsearch_configuration_form_submit_custom($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler on removing elements
 *
 * @param array $form
 * @param array $form_state
 */
function _search_api_elasticsearch_configuration_form_remove_custom($form, &$form_state) {
  $form_state['values']['remove_delta'] == 'none';

  if (isset($form_state['triggering_element']['#remove_delta'])) {
    $form_state['values']['remove_delta'] = $form_state['triggering_element']['#remove_delta'];
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_alter().
 */
function search_api_elasticsearch_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_api_admin_add_index') {
    search_api_elasticsearch_attach_ajax_callback($form);
    if (isset($form_state['values']) && !empty($form_state['values'])) {
      $add_options = search_api_elasticsearch_add_options($form_state['values']['server']);
      if ($add_options != FALSE) {
        search_api_elasticsearch_return_form_options($form, $form_state, array(), 'add');
      }
    }
  }
  elseif ($form_id == 'search_api_admin_index_edit') {
    $default_values = $form_state['index']->options;
    search_api_elasticsearch_attach_ajax_callback($form);
    if (!isset($form_state['values'])) {
      if (isset($form_state['build_info']['args']) && !empty($form_state['build_info']['args'])) {
        $index_obj = reset($form_state['build_info']['args']);
        $add_options = search_api_elasticsearch_add_options($index_obj->server);
        if ($add_options != FALSE) {
          search_api_elasticsearch_return_form_options($form, $form_state, $default_values, 'edit');
        }
      }
    }
    else {
      $add_options = search_api_elasticsearch_add_options($form_state['values']['server']);
      if ($add_options != FALSE) {
        search_api_elasticsearch_return_form_options($form, $form_state, $default_values, 'edit');
      }
    }
  }
}

/**
 * Ajax callback.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function search_api_elasticsearch_ajax_callback($form, &$form_state) {
  return $form['options'];
}

/**
 * Get server ID by name.
 *
 * @param integer $server_machine_name
 */
function search_api_elasticsearch_get_server_id_by_name($server_machine_name) {
  $query = '';
  $result = '';

  try {
    $query = db_select('search_api_server', 'sas');
    $query->addField('sas', 'id');
    $query->condition('sas.machine_name', $server_machine_name, '=');
    $result = $query->execute()->fetchAssoc();
  }
  catch (Exception $e) {
    watchdog('Elastic Search', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (isset($result) && !empty($result)) {
    return reset($result);
  }
  else {
    return FALSE;
  }
}

/**
 * The form options for add/edit index.
 *
 * @param array $form
 * @param array $default_values
 */
function search_api_elasticsearch_return_form_options(&$form, &$form_state, $default_values = array(), $flag) {
  $default_options = $default_values + array(
    'number_of_shards' => 1,
    'number_of_replicas' => 0,
  );

  $form['options']['number_of_shards'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_options['number_of_shards'],
    '#size' => 4,
    '#title' => t('Number of shards'),
  );

  $form['options']['number_of_replicas'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_options['number_of_replicas'],
    '#size' => 4,
    '#title' => t('Number of replicas'),
  );

  if ($flag == 'edit') {
    $form['#submit'][] = 'search_api_elasticsearch_edit_index_submit';
  }
  else {
    array_unshift($form['#submit'], 'search_api_elasticsearch_add_index_submit');
  }
}

/**
 * Add options common function.
 *
 * @param integer $server_machine_name
 */
function search_api_elasticsearch_add_options($server_machine_name) {
  if (isset($server_machine_name) && !empty($server_machine_name)) {
    $server_id = search_api_elasticsearch_get_server_id_by_name($server_machine_name);
    if ($server_id != FALSE) {
      $server_obj = search_api_server_load($server_id);
      if (isset($server_obj) && !empty($server_obj)) {
        if ($server_obj->class == 'search_api_elasticsearch_service') {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Attach the Ajax attributes.
 *
 * @param array $form
 */
function search_api_elasticsearch_attach_ajax_callback(&$form) {
  $form['options']['#prefix'] = '<div id="elasticsearch-add-index">';
  $form['options']['#suffix'] = '</div>';

  $form['server']['#ajax'] = array(
    'callback' => 'search_api_elasticsearch_ajax_callback',
    'wrapper' => 'elasticsearch-add-index',
    'method' => 'replace',
    'effect' => 'fade',
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function search_api_elasticsearch_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['search_api_index']['function'])) {
    $theme_registry['search_api_index']['function'] = 'search_api_elasticsearch_theme_search_api_index';
  }
}

/**
 * Implements hook_theme().
 */
function search_api_elasticsearch_theme($existing, $type, $theme, $path) {
  return array(
    'search_api_elasticsearch_index' => array(
      'variables' => array(
        'module' => 'search_api_elasticsearch',
        'settings' => NULL,
      ),
      'template' => 'search-api-elasticsearch-index',
      'path' => drupal_get_path('module', 'search_api_elasticsearch') . '/templates',
    )
  );
}

/**
 * Template preprocess index template view.
 *
 * @param array $variables
 */
function template_preprocess_search_api_elasticsearch_index(&$variables) {
  $settings = $variables['settings'];
  $variables['read_only'] = '';

  $variables['name'] = $settings['name'];

  if ($settings['enabled']) {
    $variables['enabled'] = t('Enabled (!disable_link)', array('!disable_link' => l(t('disable'), 'admin/config/search/search_api/index/' . $settings['machine_name'] . '/disable')));
  }
  elseif ($settings['server'] && $settings['server']->enabled) {
    $variables['enabled'] = t('Disabled (!enable_link)', array('!enable_link' => l(t('enable'), 'admin/config/search/search_api/index/' . $settings['machine_name'] . '/enable', array('query' => array('token' => drupal_get_token($settings['machine_name']))))));
  }
  else {
    $variables['enabled'] = t('Disabled');
  }

  $variables['machine_name'] = check_plain($settings['machine_name']);

  $type = search_api_get_item_type_info($settings['item_type']);
  $type = $type['name'];
  $variables['item_type'] = check_plain($type);

  if (!empty($settings['description'])) {
    $variables['description'] = nl2br(check_plain($settings['description']));
  }

  if (!empty($settings['server'])) {
    $variables['server'] = l($settings['server']->name, 'admin/config/search/search_api/server/' . $settings['server']->machine_name);
    if (!empty($settings['server']->description)) {
      $variables['server_description'] = nl2br(check_plain($settings['server']->description));
    }
  }

  if (!$settings['read_only'] && !empty($settings['options'])) {
    $variables['read_only'] = $settings['read_only'];

    if (empty($settings['options']['cron_limit'])) {
      $variables['cron_limit'] = t("Don't index during cron runs");
    }
    elseif ($settings['options']['cron_limit'] < 0) {
      $variables['cron_limit'] = t('Cron batch size: Unlimited');
    }
    else {
      $variables['cron_limit'] = t('Cron batch size: :size', array(':size' => $settings['options']['cron_limit']));
    }

    if (isset($settings['options']['number_of_shards'])) {
      $variables['number_of_shards'] = t('Number of shards: :shards', array(':shards' => $settings['options']['number_of_shards']));
    }

    if (isset($settings['options']['number_of_replicas'])) {
      $variables['number_of_replicas'] = t('Number of replicas: :replicas', array(':replicas' => $settings['options']['number_of_replicas']));
    }
  }
  elseif ($settings['read_only']) {
    $variables['read_only'] = t('This index is read-only.');
  }

  $variables['configuration_status'] = theme('entity_status', array('status' => $settings['status']));
}

/**
 * Helper function. Returns themed index view.
 *
 * @param array $variables
 */
function search_api_elasticsearch_theme_search_api_index(array $variables) {
  return theme('search_api_elasticsearch_index', array('module' => 'search_api_elasticsearch', 'settings' => $variables));
}

/**
 * Submit handler
 * @param  array  $form
 * @param  array  $form_state
 */
function search_api_elasticsearch_edit_index_submit(array $form, array &$form_state) {
  form_state_values_clean($form_state);
  $merge_types = array();

  $elastic_server_id = search_api_elasticsearch_get_server_id_by_name($form_state['index']->server);
  $elastic_server = search_api_server_load($elastic_server_id);
  $index = $form_state['index'];

  $elastic_server->updateSettings($index, $merge_types);
}

/**
 * Submit handler
 * @param  array  $form
 * @param  array  $form_state
 */
function search_api_elasticsearch_add_index_submit(array $form, array &$form_state) {
  form_state_values_clean($form_state);
}

/**
 * Hook is called to fetch custom index mapping
 *
 * @return array
 */
function hook_search_api_elasticsearch_get_mapping_override(SearchApiIndex $index, array $properties) {

  return array();
}

/**
 * Hook is called to fetch custom index mapping
 *
 * @return array
 */
function hook_search_api_elasticsearch_get_index_settings_override(SearchApiIndex $index, array $options) {

  return array();
}


